import("filenames.gni")
import("buildflags/buildflags.gni")
import("//content/public/app/mac_helpers.gni")
import("//components/spellcheck/spellcheck_build_features.gni")
import("//pdf/features.gni")
import("build/asar.gni")
import("build/npm.gni")
import("build/templated_file.gni")
import("build/webpack/webpack.gni")
import("//build/apple/tweak_info_plist.gni")
import("filenames.auto.gni")
import("filenames.libcxx.gni")
import("filenames.libcxxabi.gni")
import("electron_paks.gni")
import("build/tsc.gni")
import("build/extract_symbols.gni")
import("//tools/v8_context_snapshot/v8_context_snapshot.gni")
import("//v8/gni/snapshot_toolchain.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/grit/repack.gni")


branding = read_file("shell/app/BRANDING.json", "json")
electron_version = read_file("ELECTRON_VERSION", "trim string")
electron_product_name = branding.product_name
electron_project_name = branding.project_name



declare_args() {
  use_prebuilt_v8_context_snapshot = false
}

npm_action("electron_version_args") {
    script = "generate-version-json"

    outputs = [ "$target_gen_dir/electron_version.args" ]

    args = rebase_path(outputs)

    inputs = [
        "ELECTRON_VERSION",
        "script/generate-version-json.js",
    ]
}

# if (enable_electron_extensions) {
#   assert(enable_extensions,
#          "Chrome extension support requires enable_extensions=true")
# }

v8_use_external_startup_data = true
# use_v8_context_snapshot = false

target_gen_default_app_js = "$target_gen_dir/js/default_app"


if (is_mac) {
    import("//build/config/mac/rules.gni")
    import("build/rules.gni")
    import("//third_party/icu/config.gni")
    import("//v8/gni/v8.gni")
    import("//ui/gl/features.gni")

    electron_framework_name = "$electron_product_name Framework"
    electron_helper_name = "$electron_product_name Helper"
    electron_framework_version = "A"
    electron_mac_bundle_id = branding.mac_bundle_id

    # 这个东西负责加载xib，同时转变为了nib
    mac_xib_bundle_data("electron_xibs") {
        sources = [ "shell/common/resources/mac/MainMenu.xib" ]
    }

    action("fake_v8_context_snapshot_generator") {
        script = "build/fake_v8_context_snapshot_generator.py"
        args = [
            rebase_path("$root_out_dir/$v8_context_snapshot_filename"),
            rebase_path("$root_out_dir/fake/$v8_context_snapshot_filename"),
        ]
        outputs = [ "$root_out_dir/fake/$v8_context_snapshot_filename" ]
    }

    bundle_data("electron_framework_resources") {
        public_deps = [ ":packed_resources" ]
        sources = []
        if (icu_use_data_file) {
            sources += [ "$root_out_dir/icudtl.dat" ]
            public_deps += [ "//third_party/icu:icudata" ]
        }
        if (v8_use_external_startup_data) {
            public_deps += [ "//v8" ]
            if (use_v8_context_snapshot) {
                if (use_prebuilt_v8_context_snapshot) {
                    sources += [ "$root_out_dir/fake/$v8_context_snapshot_filename" ]
                    public_deps += [ ":fake_v8_context_snapshot_generator" ]
                } else {
                    sources += [ "$root_out_dir/$v8_context_snapshot_filename" ]
                    public_deps += [ "//tools/v8_context_snapshot" ]
                }
            } else {
                sources += [ "$root_out_dir/snapshot_blob.bin" ]
            }
        }
        outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
    }

      # bundle_data("electron_framework_libraries") {
      #   sources = []
      #   public_deps = []
      #   sources += [ "$root_out_dir/libffmpeg.dylib" ]
      #   public_deps += [ "//third_party/ffmpeg:ffmpeg" ]
      #   outputs = [ "{{bundle_contents_dir}}/Libraries/{{source_file_part}}" ]
      # }

  if (use_egl) {
    # Add the ANGLE .dylibs in the Libraries directory of the Framework.
    bundle_data("electron_angle_binaries") {
      sources = [
        "$root_out_dir/egl_intermediates/libEGL.dylib",
        "$root_out_dir/egl_intermediates/libGLESv2.dylib",
      ]
      outputs = [ "{{bundle_contents_dir}}/Libraries/{{source_file_part}}" ]
      public_deps = [ "//ui/gl:angle_library_copy" ]
    }

    # Add the SwiftShader .dylibs in the Libraries directory of the Framework.
    bundle_data("electron_swiftshader_binaries") {
      sources = [
        "$root_out_dir/egl_intermediates/libswiftshader_libEGL.dylib",
        "$root_out_dir/egl_intermediates/libswiftshader_libGLESv2.dylib",
        "$root_out_dir/vk_intermediates/libvk_swiftshader.dylib",
        "$root_out_dir/vk_intermediates/vk_swiftshader_icd.json",
      ]
      outputs = [ "{{bundle_contents_dir}}/Libraries/{{source_file_part}}" ]
      public_deps = [
        "//ui/gl:swiftshader_egl_library_copy",
        "//ui/gl:swiftshader_vk_library_copy",
      ]
    }
  }
  
  group("electron_angle_library") {
    if (use_egl) {
      deps = [ ":electron_angle_binaries" ]
    }
  }

  group("electron_swiftshader_library") {
    if (use_egl) {
      deps = [ ":electron_swiftshader_binaries" ]
    }
  }   

  template("stripped_framework") {
    action(target_name) {
      assert(defined(invoker.framework))

      script = "//electron/build/strip_framework.py"

      forward_variables_from(invoker, [ "deps" ])
      inputs = [ "$root_out_dir/" + invoker.framework ]
      outputs = [ "$target_out_dir/stripped_frameworks/" + invoker.framework ]

      args = rebase_path(inputs) + rebase_path(outputs)
    }
  }

  stripped_framework("stripped_mantle_framework") {
    framework = "Mantle.framework"
    deps = [ "//third_party/squirrel.mac:mantle_framework" ]
  }

  stripped_framework("stripped_reactiveobjc_framework") {
    framework = "ReactiveObjC.framework"
    deps = [ "//third_party/squirrel.mac:reactiveobjc_framework" ]
  }

  stripped_framework("stripped_squirrel_framework") {
    framework = "Squirrel.framework"
    deps = [ "//third_party/squirrel.mac:squirrel_framework" ]
  }  

  action("electron_app_lproj_dirs") {
    outputs = []

    foreach(locale, locales_as_mac_outputs) {
      outputs += [ "$target_gen_dir/app_infoplist_strings/$locale.lproj" ]
    }
    script = "build/mac/make_locale_dirs.py"
    args = rebase_path(outputs)
  } 

  foreach(locale, locales_as_mac_outputs) {
    bundle_data("electron_app_strings_${locale}_bundle_data") {
      sources = [ "$target_gen_dir/app_infoplist_strings/$locale.lproj" ]
      outputs = [ "{{bundle_resources_dir}}/$locale.lproj" ]
      public_deps = [ ":electron_app_lproj_dirs" ]
    }
  }  

  group("electron_app_strings_bundle_data") {
    public_deps = []
    foreach(locale, locales_as_mac_outputs) {
      public_deps += [ ":electron_app_strings_${locale}_bundle_data" ]
    }
  }  
     
}

config("branding") {
    defines = [
        "ELECTRON_PRODUCT_NAME=\"$electron_product_name\"",
        "ELECTRON_PROJECT_NAME=\"$electron_project_name\"",
    ]
}

config("electron_lib_config") {
    include_dirs = [ "." ]
}




templated_file("electron_version_header") {
    deps = [ ":electron_version_args" ]

    template = "build/templates/electron_version.tmpl"
    output = "$target_gen_dir/electron_version.h"

    args_files = get_target_outputs(":electron_version_args")
}

action("electron_fuses") {
  script = "build/fuses/build.py"

  inputs = [ "build/fuses/fuses.json5" ]

  outputs = [
    "$target_gen_dir/fuses.h",
    "$target_gen_dir/fuses.cc",
  ]

  args = rebase_path(outputs)
}

copy("electron_version") {
  sources = [ "ELECTRON_VERSION" ]
  outputs = [ "$root_build_dir/version" ]
}


mac_framework_bundle("electron_framework") {
    output_name = electron_framework_name
    framework_version = electron_framework_version
    framework_contents = [
        "Resources",
        "Libraries",
    ]
    if (!is_mas_build) {
      framework_contents += [ "Helpers" ]
    }
    public_deps = [
        # ":electron_framework_libraries",
        ":electron_lib",
    ]
    deps = [
        ":electron_angle_library",
        ":electron_swiftshader_library",
        # ":electron_framework_libraries",
        ":electron_framework_resources",
        ":electron_xibs",
    ]
    # 这个配置项目是定义mac生成的应用的一些行为的配置文件
    # 详情：https://blog.csdn.net/linxinfa/article/details/107735015
    info_plist = "shell/common/resources/mac/Info.plist"

    extra_substitutions = [
        "ELECTRON_BUNDLE_ID=$electron_mac_bundle_id.framework",
        "ELECTRON_VERSION=$electron_version",
    ]
    include_dirs = [ ".", "//third_party/skia"]
    sources = filenames.framework_sources
    frameworks = []

    if (enable_osr) {
        frameworks += [ "IOSurface.framework" ]
    }

    ldflags = [
        "-Wl,-install_name,@rpath/$output_name.framework/$output_name",
        "-rpath",
        "@loader_path/Libraries",

        # Required for exporting all symbols of libuv.
        "-Wl,-force_load,obj/third_party/electron_node/deps/uv/libuv.a",
    ]
}

template("electron_helper_app") {
    mac_app_bundle(target_name) {
        assert(defined(invoker.helper_name_suffix))

        output_name = electron_helper_name + invoker.helper_name_suffix
        deps = [ ":electron_framework+link" ]
        if (!is_mas_build) {
          deps += [ "//sandbox/mac:seatbelt" ]
        }
        defines = [ "HELPER_EXECUTABLE" ]
        sources = [
            "shell/app/electron_main_mac.cc",
            "shell/common/electron_constants.cc",
        ]
        include_dirs = [ "." ]
        info_plist = "shell/renderer/resources/mac/Info.plist"
        extra_substitutions =
            [ "ELECTRON_BUNDLE_ID=$electron_mac_bundle_id.helper" ]
        ldflags = [
            "-rpath",
            "@executable_path/../../..",
        ]
        ldflags += [
            "-rpath",
            "@executable_path/../../../../../..",
        ]
        # if (is_component_build) {
        #     ldflags += [
        #       "-rpath",
        #       "@executable_path/../../../../../..",
        #     ]
        # }
    }
}

foreach(helper_params, content_mac_helpers) {
    _helper_target = helper_params[0]
    _helper_bundle_id = helper_params[1]
    _helper_suffix = helper_params[2]
    electron_helper_app("electron_helper_app_${_helper_target}") {
        helper_name_suffix = _helper_suffix
    }
}

# electron_paks("packed_resources") {
#   if (is_mac) {
#     output_dir = "$root_gen_dir/electron_repack"
#     copy_data_to_bundle = true
#   } else {
#     output_dir = root_out_dir
#   }
# }


bundle_data("electron_app_framework_bundle_data") {
    sources = [ "$root_out_dir/$electron_framework_name.framework" ]

    if (!is_mas_build) {
      sources += get_target_outputs(":stripped_mantle_framework") +
                 get_target_outputs(":stripped_reactiveobjc_framework") +
                 get_target_outputs(":stripped_squirrel_framework")
    }

    outputs = [ "{{bundle_contents_dir}}/Frameworks/{{source_file_part}}" ]
    public_deps = [
      ":electron_framework+link",
      ":stripped_mantle_framework",
      ":stripped_reactiveobjc_framework",
      ":stripped_squirrel_framework",        
    ]
    # 这个东西必须要有 不然不生成这个helper运行会出错
    foreach(helper_params, content_mac_helpers) {
        sources +=
        [ "$root_out_dir/${electron_helper_name}${helper_params[2]}.app" ]
        public_deps += [ ":electron_helper_app_${helper_params[0]}" ]
    }
}

typescript_build("default_app_js") {
   deps = [ ":build_electron_definitions" ]

   sources = filenames.default_app_ts_sources

   output_gen_dir = target_gen_default_app_js
   output_dir_name = "default_app"
   tsconfig = "tsconfig.default_app.json"
}

target_gen_default_app_js = "$target_gen_dir/js/default_app"

copy("default_app_static") {
    sources = filenames.default_app_static_sources
    outputs = [ "$target_gen_default_app_js/{{source}}" ]
}

copy("default_app_octicon_deps") {
    sources = filenames.default_app_octicon_sources
    outputs = [ "$target_gen_default_app_js/electron/default_app/octicon/{{source_file_part}}" ]
}

# 把default_app目录下sources的几个产物，拷贝压缩到default_app.asar
asar("default_app_asar") {
    deps = [
       ":default_app_js",
#        ":default_app_octicon_deps",
        ":default_app_static",
    ]

    root = "$target_gen_default_app_js/electron/default_app"
    sources =
       get_target_outputs(":default_app_js") +
    get_target_outputs(":default_app_static")
#    get_target_outputs(":default_app_octicon_deps")
    outputs = [ "$root_out_dir/resources/default_app.asar" ]
}

bundle_data("electron_app_resources") {
    public_deps = [
        ":default_app_asar",
       ":electron_app_strings_bundle_data",
    ]
    sources = [
        "$root_out_dir/resources/default_app.asar",
        "shell/browser/resources/mac/electron.icns",
    ]
    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
}

asar_hashed_info_plist("electron_app_plist") {
    keys = [ "DEFAULT_APP_ASAR_HEADER_SHA" ]
    hash_targets = [ ":default_app_asar_header_hash" ]
    plist_file = "shell/browser/resources/mac/Info.plist"
}

npm_action("build_electron_definitions") {
  script = "gn-typescript-definitions"
  args = [ rebase_path("$target_gen_dir/tsc/typings/electron.d.ts") ]
  inputs = auto_filenames.api_docs + [ "yarn.lock" ]

  outputs = [ "$target_gen_dir/tsc/typings/electron.d.ts" ]
}

webpack_build("electron_asar_bundle") {
  deps = [ ":build_electron_definitions" ]

  inputs = auto_filenames.asar_bundle_deps

  config_file = "//electron/build/webpack/webpack.config.asar.js"
  out_file = "$target_gen_dir/js2c/asar_bundle.js"
}


webpack_build("electron_browser_bundle") {
  deps = [ ":build_electron_definitions" ]

  inputs = auto_filenames.browser_bundle_deps

  config_file = "//electron/build/webpack/webpack.config.browser.js"
  out_file = "$target_gen_dir/js2c/browser_init.js"
}

action("electron_js2c") {
  deps = [
    ":electron_asar_bundle",
    ":electron_browser_bundle",
  ]

  sources = [
    "$target_gen_dir/js2c/asar_bundle.js",
    "$target_gen_dir/js2c/browser_init.js",
  ]

  inputs = sources + [ "//third_party/electron_node/tools/js2c.py" ]

  outputs = [ "$root_gen_dir/electron_natives.cc" ]

  script = "build/js2c.py"

  args = [ rebase_path("//third_party/electron_node") ] +
         rebase_path(outputs, root_build_dir) +
         rebase_path(sources, root_build_dir)
}

action("electron_generate_node_defines") {
  script = "build/generate_node_defines.py"

  inputs = [
    "//third_party/electron_node/src/tracing/trace_event_common.h",
    "//third_party/electron_node/src/tracing/trace_event.h",
    "//third_party/electron_node/src/util.h",
  ]

  outputs = [
    "$target_gen_dir/push_and_undef_node_defines.h",
    "$target_gen_dir/pop_node_defines.h",
  ]

  args = [ rebase_path(target_gen_dir) ] + rebase_path(inputs)
}

action("generate_config_gypi") {
  outputs = [ "$root_gen_dir/config.gypi" ]
  script = "script/generate-config-gypi.py"
  args = rebase_path(outputs) + [ target_cpu ]
}

source_set("electron_lib") {
    configs += [ "//v8:external_startup_data" ]
    configs += [ "//third_party/electron_node:node_internals" ]
    sources = filenames.lib_sources

    public_configs = [
        ":branding",
        ":electron_lib_config",
    ]

    defines = [ "V8_DEPRECATION_WARNINGS" ]
    libs = []

    include_dirs = [
        ".",
        "$target_gen_dir",

        # TODO(nornagon): replace usage of SchemeRegistry by an actually exported
        # API of blink, then remove this from the include_dirs.
        "//third_party/blink/renderer",
    ]

    if (is_mac) {
        sources += filenames.lib_sources_mac
    }

    sources += filenames.my_lib

    deps = [
        ":electron_fuses",
        ":electron_generate_node_defines",
        ":electron_js2c",
        "buildflags",
        "chromium_src:chrome",
        "chromium_src:chrome_spellchecker",
        "//base:base_static",
        "//base/allocator:buildflags",
        # 这个包似乎就是用来引入NSApplication这些东西
        "//content/common:mac_helpers",
        ":electron_version_header",
        "//gin",
        ":resources",
        "//v8",
        "//v8:v8_libplatform",
        "//content/public/browser",
        "//content/public/common",
        "//content/public/child",
        "//content/public/gpu",
        "//content/public/renderer",
        "//content/public/utility",
        "//chrome/common",
        "//media/capture/mojom:video_capture",
        "//media/mojo/mojom",
        "//services/device/public/cpp/geolocation",
        "//services/device/public/cpp/hid",
        "//services/device/public/mojom",
        "//services/proxy_resolver:lib",
        "//services/video_capture/public/mojom:constants",
        "//services/viz/privileged/mojom/compositing",
        "//third_party/electron_node:node_lib",
        "//ui/base/idle",
        "//ui/events:dom_keycode_converter",
        "//ui/gl",
        "//ui/native_theme",
        "//ui/shell_dialogs",
        "//ui/views",
    ]

    # if (is_mac) {
    #     deps += [
    #         "//components/remote_cocoa/app_shim",
    #         "//components/remote_cocoa/browser",
    #         "//content/common:mac_helpers",
    #         "//ui/accelerated_widget_mac",
    #     ]
    # }

    public_deps = [
        # "//base",
        "//content/public/app",
    ]

    sources += get_target_outputs(":electron_fuses")

    if (enable_electron_extensions) {
        deps += [
            "//extensions/common",
        ]
    }

    deps += ["//chrome/services/printing/public/mojom"]

    deps += [
        "//extensions/browser",
    ]

    if (enable_pdf) {
      # Printing depends on some //pdf code, so it needs to be built even if the
      # pdf viewer isn't enabled.
      deps += [
        "//pdf",
        "//pdf:features",
      ]
    }

    if (enable_pdf_viewer) {
      deps += [
        "//chrome/browser/resources/pdf:resources",
        "//components/pdf/browser",
        "//components/pdf/renderer",
        "//pdf:pdf_ppapi",
      ]
      # sources += [
      #   "shell/browser/electron_pdf_web_contents_helper_client.cc",
      #   "shell/browser/electron_pdf_web_contents_helper_client.h",
      # ]
    }

    if (is_mac) {
      deps += [ 
            "//components/remote_cocoa/app_shim",
            "//components/remote_cocoa/browser",
            "//chrome/services/mac_notifications/public/mojom",
            "//components/printing/common:mojo_interfaces",
      ]
    }

    # if (is_component_build) {
    #   defines += [ "NODE_SHARED_MODE" ]
    # }

    frameworks = [
        "Foundation.framework",
        "AppKit.framework",
        "AVFoundation.framework",
        "Carbon.framework",
        "LocalAuthentication.framework",
        "QuartzCore.framework",
        "Quartz.framework",
        "Security.framework",
        "SecurityInterface.framework",
        "ServiceManagement.framework",
        "StoreKit.framework",
    ]

    cflags_objcc = [ "-fobjc-weak" ]
}

    # extract_symbols("electron_framework_syms") {
    #   binary = "$root_out_dir/$electron_framework_name.framework/Versions/$electron_framework_version/$electron_framework_name"
    #   symbol_dir = "$root_out_dir/breakpad_symbols"
    #   dsym_file = "$root_out_dir/$electron_framework_name.dSYM/Contents/Resources/DWARF/$electron_framework_name"
    #   deps = [ ":electron_framework" ]
    # }

    # foreach(helper_params, content_mac_helpers) {
    #   _helper_target = helper_params[0]
    #   _helper_bundle_id = helper_params[1]
    #   _helper_suffix = helper_params[2]
    #   extract_symbols("electron_helper_syms_${_helper_target}") {
    #     binary = "$root_out_dir/$electron_helper_name${_helper_suffix}.app/Contents/MacOS/$electron_helper_name${_helper_suffix}"
    #     symbol_dir = "$root_out_dir/breakpad_symbols"
    #     dsym_file = "$root_out_dir/$electron_helper_name${_helper_suffix}.dSYM/Contents/Resources/DWARF/$electron_helper_name${_helper_suffix}"
    #     deps = [ ":electron_helper_app_${_helper_target}" ]
    #   }
    # }

    # extract_symbols("electron_app_syms") {
    #   binary = "$root_out_dir/$electron_product_name.app/Contents/MacOS/$electron_product_name"
    #   symbol_dir = "$root_out_dir/breakpad_symbols"
    #   dsym_file = "$root_out_dir/$electron_product_name.dSYM/Contents/Resources/DWARF/$electron_product_name"
    #   deps = [ ":electron_app" ]
    # }

    # extract_symbols("swiftshader_egl_syms") {
    #   binary = "$root_out_dir/libswiftshader_libEGL.dylib"
    #   symbol_dir = "$root_out_dir/breakpad_symbols"
    #   dsym_file = "$root_out_dir/libswiftshader_libEGL.dylib.dSYM/Contents/Resources/DWARF/libswiftshader_libEGL.dylib"
    #   deps =
    #       [ "//third_party/swiftshader/src/OpenGL/libEGL:swiftshader_libEGL" ]
    # }

    # extract_symbols("swiftshader_gles_syms") {
    #   binary = "$root_out_dir/libswiftshader_libGLESv2.dylib"
    #   symbol_dir = "$root_out_dir/breakpad_symbols"
    #   dsym_file = "$root_out_dir/libswiftshader_libGLESv2.dylib.dSYM/Contents/Resources/DWARF/libswiftshader_libGLESv2.dylib"
    #   deps = [
    #     "//third_party/swiftshader/src/OpenGL/libGLESv2:swiftshader_libGLESv2",
    #   ]
    # }

    # extract_symbols("crashpad_handler_syms") {
    #   binary = "$root_out_dir/chrome_crashpad_handler"
    #   symbol_dir = "$root_out_dir/breakpad_symbols"
    #   dsym_file = "$root_out_dir/chrome_crashpad_handler.dSYM/Contents/Resources/DWARF/chrome_crashpad_handler"
    #   deps = [ "//components/crash/core/app:chrome_crashpad_handler" ]
    # }

    # group("electron_symbols") {
    #   deps = [
    #     ":electron_app_syms",
    #     ":electron_framework_syms",
    #     ":swiftshader_egl_syms",
    #     ":swiftshader_gles_syms",
    #   ]

    #   if (!is_mas_build) {
    #     deps += [ ":crashpad_handler_syms" ]
    #   }

    #   foreach(helper_params, content_mac_helpers) {
    #     _helper_target = helper_params[0]
    #     deps += [ ":electron_helper_syms_${_helper_target}" ]
    #   }
    # }

grit("resources") {
  source = "electron_resources.grd"

  outputs = [
    "grit/electron_resources.h",
    "electron_resources.pak",
  ]

  # Mojo manifest overlays are generated.
  grit_flags = [
    "-E",
    "target_gen_dir=" + rebase_path(target_gen_dir, root_build_dir),
  ]

  deps = [ ":copy_shell_devtools_discovery_page" ]

  output_dir = "$target_gen_dir"
}

copy("copy_shell_devtools_discovery_page") {
  sources = [ "//content/shell/resources/shell_devtools_discovery_page.html" ]
  outputs = [ "$target_gen_dir/shell_devtools_discovery_page.html" ]
}

electron_paks("packed_resources") {
  if (is_mac) {
    output_dir = "$root_gen_dir/electron_repack"
    copy_data_to_bundle = true
  } else {
    output_dir = root_out_dir
  }
}

mac_app_bundle("electron_app") {
    output_name = electron_product_name
    sources = [
        "shell/app/electron_main_mac.cc",
        "shell/common/electron_constants.cc",
    ]
    include_dirs = [ ".", "//third_party/abseil-cpp", "//third_party/skia" ]
    info_plist_target = ":electron_app_plist"
    deps = [
        ":electron_app_framework_bundle_data",
        ":electron_app_resources",
        ":electron_app_plist",
        ":electron_fuses",
        "//electron/buildflags",
    ]
    extra_substitutions = [
        "ELECTRON_BUNDLE_ID=$electron_mac_bundle_id",
        "ELECTRON_VERSION=$electron_version",
    ]
    ldflags = [
        "-rpath",
        "@executable_path/../Frameworks",
    ]
}

template("dist_zip") {
  _runtime_deps_target = "${target_name}__deps"
  _runtime_deps_file =
      "$root_out_dir/gen.runtime/" + get_label_info(target_name, "dir") + "/" +
      get_label_info(target_name, "name") + ".runtime_deps"

  group(_runtime_deps_target) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "data_deps",
                             "data",
                             "testonly",
                           ])
    write_runtime_deps = _runtime_deps_file
  }

  action(target_name) {
    script = "//electron/build/zip.py"
    deps = [ ":$_runtime_deps_target" ]
    forward_variables_from(invoker,
                           [
                             "outputs",
                             "testonly",
                           ])
    flatten = false
    flatten_relative_to = false
    if (defined(invoker.flatten)) {
      flatten = invoker.flatten
      if (defined(invoker.flatten_relative_to)) {
        flatten_relative_to = invoker.flatten_relative_to
      }
    }
    args = rebase_path(outputs + [ _runtime_deps_file ], root_build_dir) + [
             target_cpu,
             target_os,
             "$flatten",
             "$flatten_relative_to",
           ]
  }
}

copy("libcxx_headers") {
  sources = libcxx_headers + libcxx_licenses +
            [ "//buildtools/third_party/libc++/__config_site" ]
  outputs = [ "$target_gen_dir/electron_libcxx_include/{{source_root_relative_dir}}/{{source_file_part}}" ]
}

copy("electron_license") {
  sources = [ "LICENSE" ]
  outputs = [ "$root_build_dir/{{source_file_part}}" ]
}

copy("chromium_licenses") {
  deps = [ "//components/resources:about_credits" ]
  sources = [ "$root_gen_dir/components/resources/about_credits.html" ]
  outputs = [ "$root_build_dir/LICENSES.chromium.html" ]
}

group("licenses") {
  data_deps = [
    ":chromium_licenses",
    ":electron_license",
  ]
}

mksnapshot_deps = [
  ":licenses",
  "//v8:mksnapshot($v8_snapshot_toolchain)",
]

if (use_v8_context_snapshot) {
  mksnapshot_deps += [ "//tools/v8_context_snapshot:v8_context_snapshot_generator($v8_snapshot_toolchain)" ]
}

dist_zip("libcxx_headers_zip") {
  data_deps = [ ":libcxx_headers" ]
  flatten = true
  flatten_relative_to = rebase_path(
          "$target_gen_dir/electron_libcxx_include/buildtools/third_party/libc++/trunk",
          "$root_out_dir")

  outputs = [ "$root_build_dir/libcxx_headers.zip" ]
}

dist_zip("electron_mksnapshot_zip") {
  data_deps = mksnapshot_deps
  outputs = [ "$root_build_dir/mksnapshot.zip" ]
}

copy("libcxxabi_headers") {
  sources = libcxxabi_headers + libcxxabi_licenses
  outputs = [ "$target_gen_dir/electron_libcxxabi_include/{{source_root_relative_dir}}/{{source_file_part}}" ]
}

dist_zip("libcxxabi_headers_zip") {
  data_deps = [ ":libcxxabi_headers" ]
  flatten = true
  flatten_relative_to = rebase_path(
          "$target_gen_dir/electron_libcxxabi_include/buildtools/third_party/libc++abi/trunk",
          "$root_out_dir")

  outputs = [ "$root_build_dir/libcxxabi_headers.zip" ]
}

action("libcxx_objects_zip") {
  deps = [ "//buildtools/third_party/libc++" ]
  script = "build/zip_libcxx.py"
  outputs = [ "$root_build_dir/libcxx_objects.zip" ]
  args = rebase_path(outputs)
}

dist_zip("electron_dist_zip") {
  data_deps = [
    ":electron_app",
    ":electron_version",
    ":licenses",
  ]
  if (is_linux) {
    data_deps += [ "//sandbox/linux:chrome_sandbox" ]
  }
  outputs = [ "$root_build_dir/dist.zip" ]
}

# group("electron") {
#   public_deps = [ ":electron_app" ]
# }



#group("dada_test") {
#    public_deps = [ ":electron_app" ]
#}